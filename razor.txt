Razor View Engine
Now that we're using ASP.NET Core MVC, we have access to the Razor View Engine. The .cshtml file extension we've been using for views actually designates Razor files. 
Razor allows us to write HTML just as before, but with the added ability to write C# code directly in our views. In addition, we can embed HTML in our embedded C#, and 
switch between the two as much as we like.

We can put a block of code in our HTML by denoting it with an @ followed by curly braces. Inside these blocks we can perform any C# operations we want.

<body>
    @{
        var StringList = new List<string>{
                                "one",
                                "two",
                                "three",
                                "four"
                            };
        
        foreach(var word in StringList)
        {
            // We can render HTML from within C# code!
            <p>@word</p>
        }
    }
</body>
We can write HTML in our C# block and it will be rendered as the C# evaluates when the page is loaded. Note that in order to use the "word" variable inside our HTML we 
have to preface it with the @ symbol again. We can nest C# inside HTML inside C# and so on as much as we like:

<body>
    @foreach(var word in StringList)
    {
       <div>
          <p>@word</p>
          @if(word.Length < 4)
          {
             <p>@word is a short word</p>
          }
       </div>
    }
</body>
Copy
Any C# operation or method call can be made outside of a C# code block (@{ }) by leading the operation/method call with the @ symbol.



Serving View Files
The most common return type for our controllers is a view, and ASP.NET Core makes serving them a breeze. Any time one of our Controllers returns a View, the framework 
attempts to use the name of your controller to find the appropriate view file. ASP.NET looks for a folder called "Views", then looks for a folder that matches the name 
of your controller, and if it fails to find the view there it will always look for a folder called Shared as a last resort.

Make sure your Views subfolders have names that match your controller names(Without "Controller")

For example UsersController would looks for its views in the Users subfolder. If a view needs to be rendered from multiple Controllers it must be in the Shared folder. 
Even though we're only working with static HTML, we'll have an easier time using .cshtml files. ASP.NET Core Mvc will not read standard .html files without some extra 
configuration. 

Let's make some content to display. Create a new folder called Views in your project directory, then make a subfolder that matches your controller name. Inside the 
subfolder add a new file called "index.cshtml"

Folder Structure

Index.cshtml
<!DOCTYPE html>
<html>
    <head>
        <meta charset='utf-8'>
        <title>Hello!</title>
    </head>
    <body>
        <h1>Hello ASP.NET Mvc!</h1>
    </body>
</html>
Now we need to tell our controller to actually serve the view.

HelloController.cs
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
namespace YourNamespace.Controllers
{
    public class HelloController : Controller
    {
        [HttpGet]
        [Route("")]
        public IActionResult Index()
        {
            return View();
            //OR
            return View("Index");
            //Both of these returns will render the same view (You only need one!)
        }
    }
}
ASP.NET Core MVC is very flexible when it comes to designating our targeted view. If we have an empty View() then it will look for a view with the same name as the 
method serving the view. We can also specify the name of the file (without .cshtml) to render.
